const nodemailer = require("nodemailer");
const { FirewallRule } = require("./models");

const createTransporter = () => {
  const requiredEnvVars = [
    "EMAIL_HOST",
    "EMAIL_PORT",
    "EMAIL_USER",
    "EMAIL_PASSWORD",
    "EMAIL_FROM",
  ];
  if (requiredEnvVars.some((v) => !process.env[v])) {
    throw new Error("Missing required email configuration");
  }

  // Parse port as number
  const port = parseInt(process.env.EMAIL_PORT, 10);
  if (isNaN(port)) {
    throw new Error("EMAIL_PORT must be a valid number");
  }

  // Determine if we should use secure connection
  const secure = port === 465;

  return nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: port,
    secure: secure,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD,
    },
    // Add TLS options for better security
    tls: {
      rejectUnauthorized: process.env.NODE_ENV === "production",
    },
  });
};

const sendEmail = async (mailOptions) => {
  try {
    const transporter = createTransporter();
    return await transporter.sendMail(mailOptions);
  } catch (error) {
    console.error("Error sending email:", error);
  }
};

const sendFirewallTestResultEmail = async (testInfo) => {
  const { to, title, message, ip } = testInfo;
  return sendEmail({
    to,
    from: process.env.EMAIL_FROM,
    subject: `[Firewall Test] ${title}`,
    html: `
      <h1>Firewall Test Result</h1>
      <p>${message}</p>
      ${ip ? `<p><strong>Detected IP:</strong> ${ip}</p>` : ""}
      <p>This test was performed to verify your firewall configuration is working correctly.</p>
      <p>If you did not initiate this test, please contact your system administrator.</p>
    `,
  });
};

const sendFirewallAlertEmail = async (alertInfo) => {
  const { to, ip, rule, reason, url, userAgent, timestamp } = alertInfo;
  return sendEmail({
    to,
    from: process.env.EMAIL_FROM,
    subject: `[Firewall Alert] ${reason}`,
    html: `
      <h1>Firewall Security Alert</h1>
      <p>A security threat has been detected and blocked by your firewall system.</p>
      <h2>Alert Details:</h2>
      <p><strong>Time:</strong> ${new Date(timestamp).toUTCString()}</p>
      <p><strong>Reason:</strong> ${reason}</p>
      <p><strong>Rule:</strong> ${rule || "N/A"}</p>
      <p><strong>IP Address:</strong> ${ip}</p>
      <p><strong>URL:</strong> ${url}</p>
      <p><strong>User Agent:</strong> ${userAgent}</p>
      <p>This alert was automatically generated by your firewall monitoring system.</p>
      <p>If you believe this is a false positive, please review your firewall rules and settings.</p>
    `,
  });
};

const addCommonFirewallRules = async (invalidateRuleCache) => {
  try {
    const commonRules = [
      // XSS Protection
      {
        name: "Block XSS Attacks",
        type: "suspicious_pattern",
        value: "<script[^>]*>.*?</script>",
        action: "block",
        priority: 10,
        enabled: true,
        source: "common_rules",
        description: "Blocks basic XSS attempts with script tags",
      },
      {
        name: "Block JavaScript Events",
        type: "suspicious_pattern",
        value: "on(load|click|mouseover|error)\\s*=",
        action: "block",
        priority: 10,
        enabled: true,
        source: "common_rules",
        description: "Blocks JavaScript event handlers in URLs",
      },

      // SQL Injection Protection
      {
        name: "Block SQL Injection - UNION",
        type: "suspicious_pattern",
        value: "(union|UNION).*(select|SELECT)",
        action: "block",
        priority: 10,
        enabled: true,
        source: "common_rules",
        description: "Blocks SQL UNION injection attempts",
      },
      {
        name: "Block SQL Injection - OR 1=1",
        type: "suspicious_pattern",
        value: "(or|OR)\\s+(1=1|'1'='1')",
        action: "block",
        priority: 10,
        enabled: true,
        source: "common_rules",
        description: "Blocks common SQL injection patterns",
      },

      // Command Injection Protection
      {
        name: "Block Command Injection",
        type: "suspicious_pattern",
        value: "(;|\\||&|`|\\$\\(|\\$\\{).*(cat|ls|pwd|whoami|id|uname)",
        action: "block",
        priority: 10,
        enabled: true,
        source: "common_rules",
        description: "Blocks command injection attempts",
      },

      // Path Traversal Protection
      {
        name: "Block Path Traversal",
        type: "suspicious_pattern",
        value: "(\\.\\./|\\.\\.\\\\/|%2e%2e%2f|%2e%2e\\\\)",
        action: "block",
        priority: 10,
        enabled: true,
        source: "common_rules",
        description: "Blocks directory traversal attacks",
      },

      // Bot Protection
      {
        name: "Block Bad Bots",
        type: "suspicious_pattern",
        value:
          "(bot|crawler|spider|scraper|scanner|curl|wget|python|perl|php|java)",
        action: "block",
        priority: 20,
        enabled: true,
        source: "common_rules",
        description: "Blocks common bot user agents",
      },

      // Malicious IPs (examples)
      {
        name: "Block Tor Exit Nodes",
        type: "ip_block",
        value: "192.42.116.0/24",
        action: "block",
        priority: 5,
        enabled: true,
        source: "common_rules",
        description: "Blocks known Tor exit node range",
      },

      // Suspicious File Extensions
      {
        name: "Block Malicious Files",
        type: "suspicious_pattern",
        value: "\\.(php|asp|aspx|jsp|cgi|pl|sh|exe|bat|cmd)$",
        action: "block",
        priority: 15,
        enabled: true,
        source: "common_rules",
        description: "Blocks requests for potentially malicious file types",
      },

      // Rate Limiting for Common Endpoints
      {
        name: "Rate Limit Login Attempts",
        type: "rate_limit",
        value: "/login",
        action: "rate_limit",
        priority: 5,
        enabled: true,
        source: "common_rules",
        description: "Rate limits login attempts to prevent brute force",
      },
      {
        name: "Rate Limit API Calls",
        type: "rate_limit",
        value: "/api/",
        action: "rate_limit",
        priority: 10,
        enabled: true,
        source: "common_rules",
        description: "Rate limits API endpoint access",
      },
    ];

    console.log(
      `[addCommonFirewallRules] Adding ${commonRules.length} common rules...`
    );

    // Remove existing common rules first
    const deleteResult = await FirewallRule.deleteMany({
      source: "common_rules",
    });
    console.log(
      `[addCommonFirewallRules] Deleted ${deleteResult.deletedCount} existing common rules`
    );

    // Insert new common rules
    const result = await FirewallRule.insertMany(commonRules, {
      ordered: false,
    });
    console.log(
      `[addCommonFirewallRules] Successfully added ${result.length} common rules`
    );

    // Invalidate cache
    if (invalidateRuleCache) {
      invalidateRuleCache();
      console.log(`[addCommonFirewallRules] Rule cache invalidated`);
    }

    return {
      success: true,
      added: result.length,
      deleted: deleteResult.deletedCount,
      message: `Successfully added ${result.length} common firewall rules`,
    };
  } catch (error) {
    console.error(`[addCommonFirewallRules] Error:`, error);
    return {
      success: false,
      error: error.message,
      added: 0,
    };
  }
};

module.exports = {
  sendFirewallTestResultEmail,
  sendFirewallAlertEmail,
  addCommonFirewallRules,
};
